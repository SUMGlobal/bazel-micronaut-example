package(default_visibility = ["//visibility:public"])

load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", "define_kt_toolchain",  "kt_jvm_library", "kt_jvm_test")
load("@rules_java//java:defs.bzl", "java_binary", "java_library", "java_plugin")

######################################################################
# rules_kotlin setup
######################################################################

KOTLIN_LANGUAGE_LEVEL="1.3" 	# "1.1", "1.2", or "1.3"
JAVA_LANGUAGE_LEVEL="11"  		# "1.6", "1.8", "9", "10", "11", or "12"

define_kt_toolchain(
    name = "kotlin_toolchain", # register in the workspace
    api_version = KOTLIN_LANGUAGE_LEVEL,
    jvm_target = JAVA_LANGUAGE_LEVEL,
    language_version = KOTLIN_LANGUAGE_LEVEL,
)

######################################################################
# Define the "kapt" annotation processors as java_plugins
# include the dependencies for the processor to run
######################################################################

java_plugin(
    name = "micronaut_inject_plugin2",
    processor_class = "io.micronaut.annotation.processing.TypeElementVisitorProcessor",
    deps = [
        "@maven//:io_micronaut_micronaut_inject_java",
        "@maven//:io_micronaut_micronaut_aop",
        "@maven//:io_micronaut_micronaut_inject",
        "@maven//:io_micronaut_micronaut_validation",
    ],
)
######################################################################
# Define the "kapt" annotation processors as java_plugins
# include the dependencies for the processor to run
######################################################################

java_plugin(
    name = "micronaut_inject_plugin",
    processor_class = "io.micronaut.annotation.processing.BeanDefinitionInjectProcessor",
    deps = [
        "@maven//:io_micronaut_micronaut_inject_java",
        "@maven//:io_micronaut_micronaut_aop",
        "@maven//:io_micronaut_micronaut_inject",
        "@maven//:io_micronaut_micronaut_validation",
    ],
)

######################################################################
# Define the "kapt" annotation processor outputs as a java_library
# export the dependencies for the generated code to run
# usually the same or very similar to the deps in the plugins
######################################################################
java_library(
    name = "micronaut_lib",
    exported_plugins = ["micronaut_inject_plugin","micronaut_inject_plugin2"],
    exports = [
        "@maven//:io_micronaut_micronaut_inject_java",
        "@maven//:io_micronaut_micronaut_aop",
        "@maven//:io_micronaut_micronaut_inject",
        "@maven//:io_micronaut_micronaut_validation",
    ],
)

######################################################################
# The application dependencies, including the resources
######################################################################
java_library(
    name = "java_deps",
    resources = glob(["src/main/resources/**/*.xml", "src/main/resources/**/*.yml"]),
    exports = [
         "@maven//:ch_qos_logback_logback_classic",
         "@maven//:ch_qos_logback_logback_core",
         "@maven//:org_slf4j_slf4j_api",
         "@maven//:org_jetbrains_exposed_exposed",
         "@maven//:io_micronaut_micronaut_http_server_netty",
         "@maven//:io_micronaut_micronaut_runtime",
         "@maven//:io_micronaut_micronaut_core",
         "@maven//:io_reactivex_rxjava2_rxkotlin",
         "@maven//:javax_annotation_javax_annotation_api",
         "@maven//:org_jetbrains_kotlinx_kotlinx_coroutines_core",
         "@maven//:io_micronaut_micronaut_http_client",

    ],
)

######################################################################
# The application kotlin code to be compiled, depend on the annotation
# processor generated code and the java_deps
######################################################################
kt_jvm_library(
    name = "app_lib",
    srcs = glob(["src/main/kotlin/**/*.kt"]),
    deps = [
        ":micronaut_lib",
        ":java_deps",
    ],
)

######################################################################
# Create the application jar file use the _deploy bazel build to
# create a fat jar for your service
######################################################################
java_binary(
    name = "bazel-micronaut-example",
    main_class = "com.sumglobal.Application",
    runtime_deps = [":app_lib"],
)


kt_jvm_test(
    name = "micronaut_tests",
    main_class = "org.junit.platform.console.ConsoleLauncher",
    args = [
        "--select-package=com.sumglobal",
    ],
    size="small",
    srcs = glob(["src/test/kotlin/**/*.kt"]),
    #resources = glob(["src/test/resources/**/*.xml", "src/test/resources/**/*.yml"]), # Would add this if we needed to add more config, not needed for out test, here for reference
    deps = [
        ":app_lib",
        ":micronaut_lib", # Need this to be sure the Annotation processor is called on our Test code...
        "@maven//:io_micronaut_test_micronaut_test_junit5",
        "@maven//:io_micronaut_test_micronaut_test_core", #Bazel requires this, it is brought in transitively in the Gradle build, but called directly in the junit5 impl above
        "@maven//:org_junit_jupiter_junit_jupiter_api",
        "@maven//:org_junit_jupiter_junit_jupiter_engine",
        "@maven//:org_junit_jupiter_junit_jupiter_params",
        "@maven//:org_junit_platform_junit_platform_console",
    ],
    runtime_deps = [
        ":app_lib",
        "@maven//:org_junit_jupiter_junit_jupiter_engine",
        "@maven//:org_junit_platform_junit_platform_console",
        "@maven//:org_junit_jupiter_junit_jupiter_api",
        "@maven//:io_micronaut_micronaut_runtime",
    ],
)
